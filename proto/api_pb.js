// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.service.Block', null, global);
goog.exportSymbol('proto.service.BlockResponse', null, global);
goog.exportSymbol('proto.service.GetBlockByBlockHashRequest', null, global);
goog.exportSymbol('proto.service.GetBlockByBlockNumberRequest', null, global);
goog.exportSymbol('proto.service.GetSearchTermTypeRequest', null, global);
goog.exportSymbol('proto.service.GetSearchTermTypeResponse', null, global);
goog.exportSymbol('proto.service.GetSearchTermTypeResponse.SearchTermType', null, global);
goog.exportSymbol('proto.service.GetTransactionRequest', null, global);
goog.exportSymbol('proto.service.GetTransactionResponse', null, global);
goog.exportSymbol('proto.service.GetUncleByHashResponse', null, global);
goog.exportSymbol('proto.service.InspectAddressRequest', null, global);
goog.exportSymbol('proto.service.InspectAddressResponse', null, global);
goog.exportSymbol('proto.service.ListBlocksResponse', null, global);
goog.exportSymbol('proto.service.ListErc20TokenTransfersRequest', null, global);
goog.exportSymbol('proto.service.ListErc20TokenTransfersResponse', null, global);
goog.exportSymbol('proto.service.ListTracesByBlockNumberRequest', null, global);
goog.exportSymbol('proto.service.ListTracesResponse', null, global);
goog.exportSymbol('proto.service.ListTransactionsByAddressRequest', null, global);
goog.exportSymbol('proto.service.ListTransactionsByBlockNumberRequest', null, global);
goog.exportSymbol('proto.service.Log', null, global);
goog.exportSymbol('proto.service.PaginationRequest', null, global);
goog.exportSymbol('proto.service.StateChange', null, global);
goog.exportSymbol('proto.service.StorageChange', null, global);
goog.exportSymbol('proto.service.Trace', null, global);
goog.exportSymbol('proto.service.Transaction', null, global);
goog.exportSymbol('proto.service.Transaction.receiptStatus', null, global);
goog.exportSymbol('proto.service.TransactionsListResponse', null, global);
goog.exportSymbol('proto.service.Withdrawal', null, global);
goog.exportSymbol('proto.service.accessObject', null, global);
goog.exportSymbol('proto.service.contractData', null, global);
goog.exportSymbol('proto.service.erc20TokenTransfer', null, global);
goog.exportSymbol('proto.service.qanAddressData', null, global);
goog.exportSymbol('proto.service.qanContractData', null, global);
goog.exportSymbol('proto.service.qanTransactionInput', null, global);
goog.exportSymbol('proto.service.tokenHolding', null, global);
goog.exportSymbol('proto.service.tokenStatistics', null, global);
goog.exportSymbol('proto.service.uncle', null, global);
goog.exportSymbol('proto.service.walletStatistics', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.PaginationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.PaginationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.PaginationRequest.displayName = 'proto.service.PaginationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.tokenHolding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.tokenHolding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.tokenHolding.displayName = 'proto.service.tokenHolding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.walletStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.walletStatistics.repeatedFields_, null);
};
goog.inherits(proto.service.walletStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.walletStatistics.displayName = 'proto.service.walletStatistics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.qanAddressData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.qanAddressData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.qanAddressData.displayName = 'proto.service.qanAddressData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.qanContractData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.qanContractData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.qanContractData.displayName = 'proto.service.qanContractData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.contractData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.contractData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.contractData.displayName = 'proto.service.contractData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.tokenStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.tokenStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.tokenStatistics.displayName = 'proto.service.tokenStatistics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.InspectAddressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.InspectAddressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.InspectAddressResponse.displayName = 'proto.service.InspectAddressResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.InspectAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.InspectAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.InspectAddressRequest.displayName = 'proto.service.InspectAddressRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ListTracesByBlockNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.ListTracesByBlockNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ListTracesByBlockNumberRequest.displayName = 'proto.service.ListTracesByBlockNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ListTracesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.ListTracesResponse.repeatedFields_, null);
};
goog.inherits(proto.service.ListTracesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ListTracesResponse.displayName = 'proto.service.ListTracesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetUncleByHashResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetUncleByHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetUncleByHashResponse.displayName = 'proto.service.GetUncleByHashResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.Trace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.Trace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.Trace.displayName = 'proto.service.Trace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.StateChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.StateChange.repeatedFields_, null);
};
goog.inherits(proto.service.StateChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.StateChange.displayName = 'proto.service.StateChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.StorageChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.StorageChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.StorageChange.displayName = 'proto.service.StorageChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetSearchTermTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetSearchTermTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetSearchTermTypeRequest.displayName = 'proto.service.GetSearchTermTypeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetSearchTermTypeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetSearchTermTypeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetSearchTermTypeResponse.displayName = 'proto.service.GetSearchTermTypeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ListTransactionsByBlockNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.ListTransactionsByBlockNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ListTransactionsByBlockNumberRequest.displayName = 'proto.service.ListTransactionsByBlockNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.Block.repeatedFields_, null);
};
goog.inherits(proto.service.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.Block.displayName = 'proto.service.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.Withdrawal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.Withdrawal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.Withdrawal.displayName = 'proto.service.Withdrawal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.uncle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.uncle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.uncle.displayName = 'proto.service.uncle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ListBlocksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.ListBlocksResponse.repeatedFields_, null);
};
goog.inherits(proto.service.ListBlocksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ListBlocksResponse.displayName = 'proto.service.ListBlocksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.BlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.BlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.BlockResponse.displayName = 'proto.service.BlockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetBlockByBlockNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetBlockByBlockNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetBlockByBlockNumberRequest.displayName = 'proto.service.GetBlockByBlockNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetBlockByBlockHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetBlockByBlockHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetBlockByBlockHashRequest.displayName = 'proto.service.GetBlockByBlockHashRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ListTransactionsByAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.ListTransactionsByAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ListTransactionsByAddressRequest.displayName = 'proto.service.ListTransactionsByAddressRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.TransactionsListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.TransactionsListResponse.repeatedFields_, null);
};
goog.inherits(proto.service.TransactionsListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.TransactionsListResponse.displayName = 'proto.service.TransactionsListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.Transaction.repeatedFields_, null);
};
goog.inherits(proto.service.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.Transaction.displayName = 'proto.service.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.qanTransactionInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.qanTransactionInput.repeatedFields_, null);
};
goog.inherits(proto.service.qanTransactionInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.qanTransactionInput.displayName = 'proto.service.qanTransactionInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.accessObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.accessObject.repeatedFields_, null);
};
goog.inherits(proto.service.accessObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.accessObject.displayName = 'proto.service.accessObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetTransactionRequest.displayName = 'proto.service.GetTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.GetTransactionResponse.repeatedFields_, null);
};
goog.inherits(proto.service.GetTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetTransactionResponse.displayName = 'proto.service.GetTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.Log.displayName = 'proto.service.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ListErc20TokenTransfersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.ListErc20TokenTransfersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ListErc20TokenTransfersRequest.displayName = 'proto.service.ListErc20TokenTransfersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ListErc20TokenTransfersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.ListErc20TokenTransfersResponse.repeatedFields_, null);
};
goog.inherits(proto.service.ListErc20TokenTransfersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ListErc20TokenTransfersResponse.displayName = 'proto.service.ListErc20TokenTransfersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.erc20TokenTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.erc20TokenTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.erc20TokenTransfer.displayName = 'proto.service.erc20TokenTransfer';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.PaginationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.PaginationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.PaginationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.PaginationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.PaginationRequest}
 */
proto.service.PaginationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.PaginationRequest;
  return proto.service.PaginationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.PaginationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.PaginationRequest}
 */
proto.service.PaginationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.PaginationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.PaginationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.PaginationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.PaginationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint32 Limit = 1;
 * @return {number}
 */
proto.service.PaginationRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.PaginationRequest} returns this
 */
proto.service.PaginationRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 Offset = 2;
 * @return {number}
 */
proto.service.PaginationRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.PaginationRequest} returns this
 */
proto.service.PaginationRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.tokenHolding.prototype.toObject = function(opt_includeInstance) {
  return proto.service.tokenHolding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.tokenHolding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.tokenHolding.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    decimals: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    value: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.tokenHolding}
 */
proto.service.tokenHolding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.tokenHolding;
  return proto.service.tokenHolding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.tokenHolding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.tokenHolding}
 */
proto.service.tokenHolding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.tokenHolding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.tokenHolding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.tokenHolding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.tokenHolding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string TokenAddress = 1;
 * @return {string}
 */
proto.service.tokenHolding.prototype.getTokenaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenHolding} returns this
 */
proto.service.tokenHolding.prototype.setTokenaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 Decimals = 2;
 * @return {number}
 */
proto.service.tokenHolding.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.tokenHolding} returns this
 */
proto.service.tokenHolding.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string Name = 3;
 * @return {string}
 */
proto.service.tokenHolding.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenHolding} returns this
 */
proto.service.tokenHolding.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Symbol = 4;
 * @return {string}
 */
proto.service.tokenHolding.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenHolding} returns this
 */
proto.service.tokenHolding.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Value = 5;
 * @return {string}
 */
proto.service.tokenHolding.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenHolding} returns this
 */
proto.service.tokenHolding.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.walletStatistics.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.walletStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.service.walletStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.walletStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.walletStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    weibalance: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenholdingsList: jspb.Message.toObjectList(msg.getTokenholdingsList(),
    proto.service.tokenHolding.toObject, includeInstance),
    firsttxsent: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lasttxsent: jspb.Message.getFieldWithDefault(msg, 4, ""),
    qanaddressdata: (f = msg.getQanaddressdata()) && proto.service.qanAddressData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.walletStatistics}
 */
proto.service.walletStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.walletStatistics;
  return proto.service.walletStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.walletStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.walletStatistics}
 */
proto.service.walletStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeibalance(value);
      break;
    case 2:
      var value = new proto.service.tokenHolding;
      reader.readMessage(value,proto.service.tokenHolding.deserializeBinaryFromReader);
      msg.addTokenholdings(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirsttxsent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLasttxsent(value);
      break;
    case 5:
      var value = new proto.service.qanAddressData;
      reader.readMessage(value,proto.service.qanAddressData.deserializeBinaryFromReader);
      msg.setQanaddressdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.walletStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.walletStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.walletStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.walletStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeibalance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenholdingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.service.tokenHolding.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQanaddressdata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.service.qanAddressData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string WeiBalance = 1;
 * @return {string}
 */
proto.service.walletStatistics.prototype.getWeibalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.walletStatistics} returns this
 */
proto.service.walletStatistics.prototype.setWeibalance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated tokenHolding TokenHoldings = 2;
 * @return {!Array<!proto.service.tokenHolding>}
 */
proto.service.walletStatistics.prototype.getTokenholdingsList = function() {
  return /** @type{!Array<!proto.service.tokenHolding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.tokenHolding, 2));
};


/**
 * @param {!Array<!proto.service.tokenHolding>} value
 * @return {!proto.service.walletStatistics} returns this
*/
proto.service.walletStatistics.prototype.setTokenholdingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.service.tokenHolding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.tokenHolding}
 */
proto.service.walletStatistics.prototype.addTokenholdings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.service.tokenHolding, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.walletStatistics} returns this
 */
proto.service.walletStatistics.prototype.clearTokenholdingsList = function() {
  return this.setTokenholdingsList([]);
};


/**
 * optional string FirstTxSent = 3;
 * @return {string}
 */
proto.service.walletStatistics.prototype.getFirsttxsent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.walletStatistics} returns this
 */
proto.service.walletStatistics.prototype.setFirsttxsent = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.walletStatistics} returns this
 */
proto.service.walletStatistics.prototype.clearFirsttxsent = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.walletStatistics.prototype.hasFirsttxsent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string LastTxSent = 4;
 * @return {string}
 */
proto.service.walletStatistics.prototype.getLasttxsent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.walletStatistics} returns this
 */
proto.service.walletStatistics.prototype.setLasttxsent = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.walletStatistics} returns this
 */
proto.service.walletStatistics.prototype.clearLasttxsent = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.walletStatistics.prototype.hasLasttxsent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional qanAddressData QanAddressData = 5;
 * @return {?proto.service.qanAddressData}
 */
proto.service.walletStatistics.prototype.getQanaddressdata = function() {
  return /** @type{?proto.service.qanAddressData} */ (
    jspb.Message.getWrapperField(this, proto.service.qanAddressData, 5));
};


/**
 * @param {?proto.service.qanAddressData|undefined} value
 * @return {!proto.service.walletStatistics} returns this
*/
proto.service.walletStatistics.prototype.setQanaddressdata = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.walletStatistics} returns this
 */
proto.service.walletStatistics.prototype.clearQanaddressdata = function() {
  return this.setQanaddressdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.walletStatistics.prototype.hasQanaddressdata = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.qanAddressData.prototype.toObject = function(opt_includeInstance) {
  return proto.service.qanAddressData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.qanAddressData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.qanAddressData.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    created: jspb.Message.getFieldWithDefault(msg, 2, 0),
    validuntil: jspb.Message.getFieldWithDefault(msg, 3, 0),
    xlinkaddress: msg.getXlinkaddress_asB64(),
    pem: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.qanAddressData}
 */
proto.service.qanAddressData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.qanAddressData;
  return proto.service.qanAddressData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.qanAddressData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.qanAddressData}
 */
proto.service.qanAddressData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreated(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValiduntil(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setXlinkaddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.qanAddressData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.qanAddressData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.qanAddressData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.qanAddressData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getValiduntil();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getXlinkaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPem();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 Version = 1;
 * @return {number}
 */
proto.service.qanAddressData.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.qanAddressData} returns this
 */
proto.service.qanAddressData.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 Created = 2;
 * @return {number}
 */
proto.service.qanAddressData.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.qanAddressData} returns this
 */
proto.service.qanAddressData.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ValidUntil = 3;
 * @return {number}
 */
proto.service.qanAddressData.prototype.getValiduntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.qanAddressData} returns this
 */
proto.service.qanAddressData.prototype.setValiduntil = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes XlinkAddress = 4;
 * @return {!(string|Uint8Array)}
 */
proto.service.qanAddressData.prototype.getXlinkaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes XlinkAddress = 4;
 * This is a type-conversion wrapper around `getXlinkaddress()`
 * @return {string}
 */
proto.service.qanAddressData.prototype.getXlinkaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getXlinkaddress()));
};


/**
 * optional bytes XlinkAddress = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getXlinkaddress()`
 * @return {!Uint8Array}
 */
proto.service.qanAddressData.prototype.getXlinkaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getXlinkaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.qanAddressData} returns this
 */
proto.service.qanAddressData.prototype.setXlinkaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string Pem = 5;
 * @return {string}
 */
proto.service.qanAddressData.prototype.getPem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.qanAddressData} returns this
 */
proto.service.qanAddressData.prototype.setPem = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.qanContractData.prototype.toObject = function(opt_includeInstance) {
  return proto.service.qanContractData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.qanContractData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.qanContractData.toObject = function(includeInstance, msg) {
  var f, obj = {
    binaryhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    compilerversion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    compressorversion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    language: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.qanContractData}
 */
proto.service.qanContractData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.qanContractData;
  return proto.service.qanContractData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.qanContractData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.qanContractData}
 */
proto.service.qanContractData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBinaryhash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompilerversion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompressorversion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.qanContractData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.qanContractData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.qanContractData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.qanContractData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBinaryhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompilerversion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCompressorversion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string BinaryHash = 1;
 * @return {string}
 */
proto.service.qanContractData.prototype.getBinaryhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.qanContractData} returns this
 */
proto.service.qanContractData.prototype.setBinaryhash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Source = 2;
 * @return {string}
 */
proto.service.qanContractData.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.qanContractData} returns this
 */
proto.service.qanContractData.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string CompilerVersion = 3;
 * @return {string}
 */
proto.service.qanContractData.prototype.getCompilerversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.qanContractData} returns this
 */
proto.service.qanContractData.prototype.setCompilerversion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string CompressorVersion = 4;
 * @return {string}
 */
proto.service.qanContractData.prototype.getCompressorversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.qanContractData} returns this
 */
proto.service.qanContractData.prototype.setCompressorversion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Language = 5;
 * @return {string}
 */
proto.service.qanContractData.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.qanContractData} returns this
 */
proto.service.qanContractData.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.contractData.prototype.toObject = function(opt_includeInstance) {
  return proto.service.contractData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.contractData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.contractData.toObject = function(includeInstance, msg) {
  var f, obj = {
    creatoraddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    creatortransaction: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bytecode: msg.getBytecode_asB64(),
    qancontractdata: (f = msg.getQancontractdata()) && proto.service.qanContractData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.contractData}
 */
proto.service.contractData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.contractData;
  return proto.service.contractData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.contractData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.contractData}
 */
proto.service.contractData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatoraddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatortransaction(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytecode(value);
      break;
    case 4:
      var value = new proto.service.qanContractData;
      reader.readMessage(value,proto.service.qanContractData.deserializeBinaryFromReader);
      msg.setQancontractdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.contractData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.contractData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.contractData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.contractData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatoraddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatortransaction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBytecode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getQancontractdata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.service.qanContractData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string CreatorAddress = 1;
 * @return {string}
 */
proto.service.contractData.prototype.getCreatoraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.contractData} returns this
 */
proto.service.contractData.prototype.setCreatoraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string CreatorTransaction = 2;
 * @return {string}
 */
proto.service.contractData.prototype.getCreatortransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.contractData} returns this
 */
proto.service.contractData.prototype.setCreatortransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes Bytecode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.service.contractData.prototype.getBytecode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Bytecode = 3;
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {string}
 */
proto.service.contractData.prototype.getBytecode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytecode()));
};


/**
 * optional bytes Bytecode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {!Uint8Array}
 */
proto.service.contractData.prototype.getBytecode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytecode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.contractData} returns this
 */
proto.service.contractData.prototype.setBytecode = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional qanContractData QanContractData = 4;
 * @return {?proto.service.qanContractData}
 */
proto.service.contractData.prototype.getQancontractdata = function() {
  return /** @type{?proto.service.qanContractData} */ (
    jspb.Message.getWrapperField(this, proto.service.qanContractData, 4));
};


/**
 * @param {?proto.service.qanContractData|undefined} value
 * @return {!proto.service.contractData} returns this
*/
proto.service.contractData.prototype.setQancontractdata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.contractData} returns this
 */
proto.service.contractData.prototype.clearQancontractdata = function() {
  return this.setQancontractdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.contractData.prototype.hasQancontractdata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.tokenStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.service.tokenStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.tokenStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.tokenStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    decimals: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxtotalsupply: jspb.Message.getFieldWithDefault(msg, 5, ""),
    holders: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    totaltransfers: jspb.Message.getFieldWithDefault(msg, 7, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.tokenStatistics}
 */
proto.service.tokenStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.tokenStatistics;
  return proto.service.tokenStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.tokenStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.tokenStatistics}
 */
proto.service.tokenStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxtotalsupply(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setHolders(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTotaltransfers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.tokenStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.tokenStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.tokenStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.tokenStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaxtotalsupply();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHolders();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getTotaltransfers();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      7,
      f
    );
  }
};


/**
 * optional string TokenAddress = 1;
 * @return {string}
 */
proto.service.tokenStatistics.prototype.getTokenaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenStatistics} returns this
 */
proto.service.tokenStatistics.prototype.setTokenaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 Decimals = 2;
 * @return {number}
 */
proto.service.tokenStatistics.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.tokenStatistics} returns this
 */
proto.service.tokenStatistics.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string Name = 3;
 * @return {string}
 */
proto.service.tokenStatistics.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenStatistics} returns this
 */
proto.service.tokenStatistics.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Symbol = 4;
 * @return {string}
 */
proto.service.tokenStatistics.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenStatistics} returns this
 */
proto.service.tokenStatistics.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string MaxTotalSupply = 5;
 * @return {string}
 */
proto.service.tokenStatistics.prototype.getMaxtotalsupply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenStatistics} returns this
 */
proto.service.tokenStatistics.prototype.setMaxtotalsupply = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 Holders = 6;
 * @return {string}
 */
proto.service.tokenStatistics.prototype.getHolders = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenStatistics} returns this
 */
proto.service.tokenStatistics.prototype.setHolders = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional uint64 TotalTransfers = 7;
 * @return {string}
 */
proto.service.tokenStatistics.prototype.getTotaltransfers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.tokenStatistics} returns this
 */
proto.service.tokenStatistics.prototype.setTotaltransfers = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.InspectAddressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.InspectAddressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.InspectAddressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.InspectAddressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletstatistics: (f = msg.getWalletstatistics()) && proto.service.walletStatistics.toObject(includeInstance, f),
    contractdata: (f = msg.getContractdata()) && proto.service.contractData.toObject(includeInstance, f),
    tokenstatistics: (f = msg.getTokenstatistics()) && proto.service.tokenStatistics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.InspectAddressResponse}
 */
proto.service.InspectAddressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.InspectAddressResponse;
  return proto.service.InspectAddressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.InspectAddressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.InspectAddressResponse}
 */
proto.service.InspectAddressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.walletStatistics;
      reader.readMessage(value,proto.service.walletStatistics.deserializeBinaryFromReader);
      msg.setWalletstatistics(value);
      break;
    case 2:
      var value = new proto.service.contractData;
      reader.readMessage(value,proto.service.contractData.deserializeBinaryFromReader);
      msg.setContractdata(value);
      break;
    case 3:
      var value = new proto.service.tokenStatistics;
      reader.readMessage(value,proto.service.tokenStatistics.deserializeBinaryFromReader);
      msg.setTokenstatistics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.InspectAddressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.InspectAddressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.InspectAddressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.InspectAddressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletstatistics();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.walletStatistics.serializeBinaryToWriter
    );
  }
  f = message.getContractdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.contractData.serializeBinaryToWriter
    );
  }
  f = message.getTokenstatistics();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.service.tokenStatistics.serializeBinaryToWriter
    );
  }
};


/**
 * optional walletStatistics WalletStatistics = 1;
 * @return {?proto.service.walletStatistics}
 */
proto.service.InspectAddressResponse.prototype.getWalletstatistics = function() {
  return /** @type{?proto.service.walletStatistics} */ (
    jspb.Message.getWrapperField(this, proto.service.walletStatistics, 1));
};


/**
 * @param {?proto.service.walletStatistics|undefined} value
 * @return {!proto.service.InspectAddressResponse} returns this
*/
proto.service.InspectAddressResponse.prototype.setWalletstatistics = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.InspectAddressResponse} returns this
 */
proto.service.InspectAddressResponse.prototype.clearWalletstatistics = function() {
  return this.setWalletstatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.InspectAddressResponse.prototype.hasWalletstatistics = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional contractData ContractData = 2;
 * @return {?proto.service.contractData}
 */
proto.service.InspectAddressResponse.prototype.getContractdata = function() {
  return /** @type{?proto.service.contractData} */ (
    jspb.Message.getWrapperField(this, proto.service.contractData, 2));
};


/**
 * @param {?proto.service.contractData|undefined} value
 * @return {!proto.service.InspectAddressResponse} returns this
*/
proto.service.InspectAddressResponse.prototype.setContractdata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.InspectAddressResponse} returns this
 */
proto.service.InspectAddressResponse.prototype.clearContractdata = function() {
  return this.setContractdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.InspectAddressResponse.prototype.hasContractdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional tokenStatistics TokenStatistics = 3;
 * @return {?proto.service.tokenStatistics}
 */
proto.service.InspectAddressResponse.prototype.getTokenstatistics = function() {
  return /** @type{?proto.service.tokenStatistics} */ (
    jspb.Message.getWrapperField(this, proto.service.tokenStatistics, 3));
};


/**
 * @param {?proto.service.tokenStatistics|undefined} value
 * @return {!proto.service.InspectAddressResponse} returns this
*/
proto.service.InspectAddressResponse.prototype.setTokenstatistics = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.InspectAddressResponse} returns this
 */
proto.service.InspectAddressResponse.prototype.clearTokenstatistics = function() {
  return this.setTokenstatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.InspectAddressResponse.prototype.hasTokenstatistics = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.InspectAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.InspectAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.InspectAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.InspectAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.InspectAddressRequest}
 */
proto.service.InspectAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.InspectAddressRequest;
  return proto.service.InspectAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.InspectAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.InspectAddressRequest}
 */
proto.service.InspectAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.InspectAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.InspectAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.InspectAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.InspectAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.service.InspectAddressRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.InspectAddressRequest} returns this
 */
proto.service.InspectAddressRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ListTracesByBlockNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ListTracesByBlockNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ListTracesByBlockNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListTracesByBlockNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocknumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagination: (f = msg.getPagination()) && proto.service.PaginationRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ListTracesByBlockNumberRequest}
 */
proto.service.ListTracesByBlockNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ListTracesByBlockNumberRequest;
  return proto.service.ListTracesByBlockNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ListTracesByBlockNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ListTracesByBlockNumberRequest}
 */
proto.service.ListTracesByBlockNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 2:
      var value = new proto.service.PaginationRequest;
      reader.readMessage(value,proto.service.PaginationRequest.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ListTracesByBlockNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ListTracesByBlockNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ListTracesByBlockNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListTracesByBlockNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.PaginationRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 BlockNumber = 1;
 * @return {number}
 */
proto.service.ListTracesByBlockNumberRequest.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.ListTracesByBlockNumberRequest} returns this
 */
proto.service.ListTracesByBlockNumberRequest.prototype.setBlocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PaginationRequest Pagination = 2;
 * @return {?proto.service.PaginationRequest}
 */
proto.service.ListTracesByBlockNumberRequest.prototype.getPagination = function() {
  return /** @type{?proto.service.PaginationRequest} */ (
    jspb.Message.getWrapperField(this, proto.service.PaginationRequest, 2));
};


/**
 * @param {?proto.service.PaginationRequest|undefined} value
 * @return {!proto.service.ListTracesByBlockNumberRequest} returns this
*/
proto.service.ListTracesByBlockNumberRequest.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.ListTracesByBlockNumberRequest} returns this
 */
proto.service.ListTracesByBlockNumberRequest.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.ListTracesByBlockNumberRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.ListTracesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ListTracesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ListTracesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ListTracesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListTracesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tracesList: jspb.Message.toObjectList(msg.getTracesList(),
    proto.service.Trace.toObject, includeInstance),
    totalrecords: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ListTracesResponse}
 */
proto.service.ListTracesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ListTracesResponse;
  return proto.service.ListTracesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ListTracesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ListTracesResponse}
 */
proto.service.ListTracesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.Trace;
      reader.readMessage(value,proto.service.Trace.deserializeBinaryFromReader);
      msg.addTraces(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalrecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ListTracesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ListTracesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ListTracesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListTracesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTracesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.service.Trace.serializeBinaryToWriter
    );
  }
  f = message.getTotalrecords();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated Trace Traces = 1;
 * @return {!Array<!proto.service.Trace>}
 */
proto.service.ListTracesResponse.prototype.getTracesList = function() {
  return /** @type{!Array<!proto.service.Trace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.Trace, 1));
};


/**
 * @param {!Array<!proto.service.Trace>} value
 * @return {!proto.service.ListTracesResponse} returns this
*/
proto.service.ListTracesResponse.prototype.setTracesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.service.Trace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.Trace}
 */
proto.service.ListTracesResponse.prototype.addTraces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.service.Trace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.ListTracesResponse} returns this
 */
proto.service.ListTracesResponse.prototype.clearTracesList = function() {
  return this.setTracesList([]);
};


/**
 * optional uint64 TotalRecords = 2;
 * @return {number}
 */
proto.service.ListTracesResponse.prototype.getTotalrecords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.ListTracesResponse} returns this
 */
proto.service.ListTracesResponse.prototype.setTotalrecords = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetUncleByHashResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetUncleByHashResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetUncleByHashResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetUncleByHashResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uncle: (f = msg.getUncle()) && proto.service.uncle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetUncleByHashResponse}
 */
proto.service.GetUncleByHashResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetUncleByHashResponse;
  return proto.service.GetUncleByHashResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetUncleByHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetUncleByHashResponse}
 */
proto.service.GetUncleByHashResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.uncle;
      reader.readMessage(value,proto.service.uncle.deserializeBinaryFromReader);
      msg.setUncle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetUncleByHashResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetUncleByHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetUncleByHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetUncleByHashResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUncle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.uncle.serializeBinaryToWriter
    );
  }
};


/**
 * optional uncle Uncle = 1;
 * @return {?proto.service.uncle}
 */
proto.service.GetUncleByHashResponse.prototype.getUncle = function() {
  return /** @type{?proto.service.uncle} */ (
    jspb.Message.getWrapperField(this, proto.service.uncle, 1));
};


/**
 * @param {?proto.service.uncle|undefined} value
 * @return {!proto.service.GetUncleByHashResponse} returns this
*/
proto.service.GetUncleByHashResponse.prototype.setUncle = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetUncleByHashResponse} returns this
 */
proto.service.GetUncleByHashResponse.prototype.clearUncle = function() {
  return this.setUncle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetUncleByHashResponse.prototype.hasUncle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.Trace.prototype.toObject = function(opt_includeInstance) {
  return proto.service.Trace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.Trace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Trace.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    calltype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    input: msg.getInput_asB64(),
    fromaddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    toaddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    value: jspb.Message.getFieldWithDefault(msg, 7, ""),
    gas: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    error: jspb.Message.getFieldWithDefault(msg, 9, ""),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 10, 0),
    blocktimestamp: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.Trace}
 */
proto.service.Trace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.Trace;
  return proto.service.Trace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.Trace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.Trace}
 */
proto.service.Trace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionhash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalltype(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInput(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromaddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setToaddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGas(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocktimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.Trace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.Trace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.Trace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Trace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCalltype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getFromaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getToaddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGas();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getBlocktimestamp();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional string TransactionHash = 1;
 * @return {string}
 */
proto.service.Trace.prototype.getTransactionhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setTransactionhash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 Index = 2;
 * @return {number}
 */
proto.service.Trace.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string CallType = 3;
 * @return {string}
 */
proto.service.Trace.prototype.getCalltype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setCalltype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes Input = 4;
 * @return {!(string|Uint8Array)}
 */
proto.service.Trace.prototype.getInput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Input = 4;
 * This is a type-conversion wrapper around `getInput()`
 * @return {string}
 */
proto.service.Trace.prototype.getInput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInput()));
};


/**
 * optional bytes Input = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInput()`
 * @return {!Uint8Array}
 */
proto.service.Trace.prototype.getInput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setInput = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string FromAddress = 5;
 * @return {string}
 */
proto.service.Trace.prototype.getFromaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setFromaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ToAddress = 6;
 * @return {string}
 */
proto.service.Trace.prototype.getToaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setToaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string Value = 7;
 * @return {string}
 */
proto.service.Trace.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 Gas = 8;
 * @return {string}
 */
proto.service.Trace.prototype.getGas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setGas = function(value) {
  return jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional string Error = 9;
 * @return {string}
 */
proto.service.Trace.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setError = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.clearError = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Trace.prototype.hasError = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 BlockNumber = 10;
 * @return {number}
 */
proto.service.Trace.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setBlocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 BlockTimestamp = 11;
 * @return {number}
 */
proto.service.Trace.prototype.getBlocktimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Trace} returns this
 */
proto.service.Trace.prototype.setBlocktimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.StateChange.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.StateChange.prototype.toObject = function(opt_includeInstance) {
  return proto.service.StateChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.StateChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.StateChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    balancebefore: jspb.Message.getFieldWithDefault(msg, 2, ""),
    balanceafter: jspb.Message.getFieldWithDefault(msg, 3, ""),
    noncebefore: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    nonceafter: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    storagechangesList: jspb.Message.toObjectList(msg.getStoragechangesList(),
    proto.service.StorageChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.StateChange}
 */
proto.service.StateChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.StateChange;
  return proto.service.StateChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.StateChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.StateChange}
 */
proto.service.StateChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalancebefore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalanceafter(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNoncebefore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNonceafter(value);
      break;
    case 6:
      var value = new proto.service.StorageChange;
      reader.readMessage(value,proto.service.StorageChange.deserializeBinaryFromReader);
      msg.addStoragechanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.StateChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.StateChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.StateChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.StateChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBalancebefore();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBalanceafter();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getStoragechangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.service.StorageChange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.service.StateChange.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.StateChange} returns this
 */
proto.service.StateChange.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BalanceBefore = 2;
 * @return {string}
 */
proto.service.StateChange.prototype.getBalancebefore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.StateChange} returns this
 */
proto.service.StateChange.prototype.setBalancebefore = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string BalanceAfter = 3;
 * @return {string}
 */
proto.service.StateChange.prototype.getBalanceafter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.StateChange} returns this
 */
proto.service.StateChange.prototype.setBalanceafter = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 NonceBefore = 4;
 * @return {string}
 */
proto.service.StateChange.prototype.getNoncebefore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.StateChange} returns this
 */
proto.service.StateChange.prototype.setNoncebefore = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.StateChange} returns this
 */
proto.service.StateChange.prototype.clearNoncebefore = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.StateChange.prototype.hasNoncebefore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 NonceAfter = 5;
 * @return {string}
 */
proto.service.StateChange.prototype.getNonceafter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.StateChange} returns this
 */
proto.service.StateChange.prototype.setNonceafter = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.StateChange} returns this
 */
proto.service.StateChange.prototype.clearNonceafter = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.StateChange.prototype.hasNonceafter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated StorageChange StorageChanges = 6;
 * @return {!Array<!proto.service.StorageChange>}
 */
proto.service.StateChange.prototype.getStoragechangesList = function() {
  return /** @type{!Array<!proto.service.StorageChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.StorageChange, 6));
};


/**
 * @param {!Array<!proto.service.StorageChange>} value
 * @return {!proto.service.StateChange} returns this
*/
proto.service.StateChange.prototype.setStoragechangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.service.StorageChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.StorageChange}
 */
proto.service.StateChange.prototype.addStoragechanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.service.StorageChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.StateChange} returns this
 */
proto.service.StateChange.prototype.clearStoragechangesList = function() {
  return this.setStoragechangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.StorageChange.prototype.toObject = function(opt_includeInstance) {
  return proto.service.StorageChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.StorageChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.StorageChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageaddress: msg.getStorageaddress_asB64(),
    valuebefore: msg.getValuebefore_asB64(),
    valueafter: msg.getValueafter_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.StorageChange}
 */
proto.service.StorageChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.StorageChange;
  return proto.service.StorageChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.StorageChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.StorageChange}
 */
proto.service.StorageChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStorageaddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValuebefore(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValueafter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.StorageChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.StorageChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.StorageChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.StorageChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValuebefore_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValueafter_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes StorageAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.service.StorageChange.prototype.getStorageaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes StorageAddress = 1;
 * This is a type-conversion wrapper around `getStorageaddress()`
 * @return {string}
 */
proto.service.StorageChange.prototype.getStorageaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStorageaddress()));
};


/**
 * optional bytes StorageAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStorageaddress()`
 * @return {!Uint8Array}
 */
proto.service.StorageChange.prototype.getStorageaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStorageaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.StorageChange} returns this
 */
proto.service.StorageChange.prototype.setStorageaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes ValueBefore = 2;
 * @return {!(string|Uint8Array)}
 */
proto.service.StorageChange.prototype.getValuebefore = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ValueBefore = 2;
 * This is a type-conversion wrapper around `getValuebefore()`
 * @return {string}
 */
proto.service.StorageChange.prototype.getValuebefore_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValuebefore()));
};


/**
 * optional bytes ValueBefore = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValuebefore()`
 * @return {!Uint8Array}
 */
proto.service.StorageChange.prototype.getValuebefore_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValuebefore()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.StorageChange} returns this
 */
proto.service.StorageChange.prototype.setValuebefore = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes ValueAfter = 3;
 * @return {!(string|Uint8Array)}
 */
proto.service.StorageChange.prototype.getValueafter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ValueAfter = 3;
 * This is a type-conversion wrapper around `getValueafter()`
 * @return {string}
 */
proto.service.StorageChange.prototype.getValueafter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValueafter()));
};


/**
 * optional bytes ValueAfter = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueafter()`
 * @return {!Uint8Array}
 */
proto.service.StorageChange.prototype.getValueafter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValueafter()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.StorageChange} returns this
 */
proto.service.StorageChange.prototype.setValueafter = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetSearchTermTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetSearchTermTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetSearchTermTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetSearchTermTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    searchterm: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetSearchTermTypeRequest}
 */
proto.service.GetSearchTermTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetSearchTermTypeRequest;
  return proto.service.GetSearchTermTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetSearchTermTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetSearchTermTypeRequest}
 */
proto.service.GetSearchTermTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchterm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetSearchTermTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetSearchTermTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetSearchTermTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetSearchTermTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearchterm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string SearchTerm = 1;
 * @return {string}
 */
proto.service.GetSearchTermTypeRequest.prototype.getSearchterm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetSearchTermTypeRequest} returns this
 */
proto.service.GetSearchTermTypeRequest.prototype.setSearchterm = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetSearchTermTypeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetSearchTermTypeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetSearchTermTypeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetSearchTermTypeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetSearchTermTypeResponse}
 */
proto.service.GetSearchTermTypeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetSearchTermTypeResponse;
  return proto.service.GetSearchTermTypeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetSearchTermTypeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetSearchTermTypeResponse}
 */
proto.service.GetSearchTermTypeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.service.GetSearchTermTypeResponse.SearchTermType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetSearchTermTypeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetSearchTermTypeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetSearchTermTypeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetSearchTermTypeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.service.GetSearchTermTypeResponse.SearchTermType = {
  ADDRESS: 0,
  TRANSACTION: 1,
  BLOCKHASH: 2,
  BLOCKNUMBER: 3
};

/**
 * optional SearchTermType Type = 1;
 * @return {!proto.service.GetSearchTermTypeResponse.SearchTermType}
 */
proto.service.GetSearchTermTypeResponse.prototype.getType = function() {
  return /** @type {!proto.service.GetSearchTermTypeResponse.SearchTermType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.service.GetSearchTermTypeResponse.SearchTermType} value
 * @return {!proto.service.GetSearchTermTypeResponse} returns this
 */
proto.service.GetSearchTermTypeResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ListTransactionsByBlockNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ListTransactionsByBlockNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ListTransactionsByBlockNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListTransactionsByBlockNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocknumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagination: (f = msg.getPagination()) && proto.service.PaginationRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ListTransactionsByBlockNumberRequest}
 */
proto.service.ListTransactionsByBlockNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ListTransactionsByBlockNumberRequest;
  return proto.service.ListTransactionsByBlockNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ListTransactionsByBlockNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ListTransactionsByBlockNumberRequest}
 */
proto.service.ListTransactionsByBlockNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 2:
      var value = new proto.service.PaginationRequest;
      reader.readMessage(value,proto.service.PaginationRequest.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ListTransactionsByBlockNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ListTransactionsByBlockNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ListTransactionsByBlockNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListTransactionsByBlockNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.PaginationRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 BlockNumber = 1;
 * @return {number}
 */
proto.service.ListTransactionsByBlockNumberRequest.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.ListTransactionsByBlockNumberRequest} returns this
 */
proto.service.ListTransactionsByBlockNumberRequest.prototype.setBlocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PaginationRequest Pagination = 2;
 * @return {?proto.service.PaginationRequest}
 */
proto.service.ListTransactionsByBlockNumberRequest.prototype.getPagination = function() {
  return /** @type{?proto.service.PaginationRequest} */ (
    jspb.Message.getWrapperField(this, proto.service.PaginationRequest, 2));
};


/**
 * @param {?proto.service.PaginationRequest|undefined} value
 * @return {!proto.service.ListTransactionsByBlockNumberRequest} returns this
*/
proto.service.ListTransactionsByBlockNumberRequest.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.ListTransactionsByBlockNumberRequest} returns this
 */
proto.service.ListTransactionsByBlockNumberRequest.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.ListTransactionsByBlockNumberRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.Block.repeatedFields_ = [22];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.service.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    parenthash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    sha3uncles: jspb.Message.getFieldWithDefault(msg, 5, ""),
    logsbloom: msg.getLogsbloom_asB64(),
    stateroot: jspb.Message.getFieldWithDefault(msg, 7, ""),
    miner: jspb.Message.getFieldWithDefault(msg, 8, ""),
    difficulty: jspb.Message.getFieldWithDefault(msg, 9, ""),
    totaldifficulty: jspb.Message.getFieldWithDefault(msg, 10, ""),
    size: jspb.Message.getFieldWithDefault(msg, 11, "0"),
    extradata: msg.getExtradata_asB64(),
    gaslimit: jspb.Message.getFieldWithDefault(msg, 13, "0"),
    gasused: jspb.Message.getFieldWithDefault(msg, 14, "0"),
    timestamp: jspb.Message.getFieldWithDefault(msg, 15, 0),
    transactioncount: jspb.Message.getFieldWithDefault(msg, 16, 0),
    tracecount: jspb.Message.getFieldWithDefault(msg, 17, 0),
    basefeepergas: jspb.Message.getFieldWithDefault(msg, 18, ""),
    burntfees: jspb.Message.getFieldWithDefault(msg, 19, ""),
    transactionfees: jspb.Message.getFieldWithDefault(msg, 20, ""),
    staticreward: jspb.Message.getFieldWithDefault(msg, 21, ""),
    unclesList: jspb.Message.toObjectList(msg.getUnclesList(),
    proto.service.uncle.toObject, includeInstance),
    mixhash: jspb.Message.getFieldWithDefault(msg, 23, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.Block}
 */
proto.service.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.Block;
  return proto.service.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.Block}
 */
proto.service.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParenthash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha3uncles(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogsbloom(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateroot(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDifficulty(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotaldifficulty(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSize(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtradata(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGaslimit(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGasused(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactioncount(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTracecount(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasefeepergas(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setBurntfees(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionfees(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setStaticreward(value);
      break;
    case 22:
      var value = new proto.service.uncle;
      reader.readMessage(value,proto.service.uncle.deserializeBinaryFromReader);
      msg.addUncles(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setMixhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getParenthash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNonce();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getSha3uncles();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLogsbloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getStateroot();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTotaldifficulty();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      11,
      f
    );
  }
  f = message.getExtradata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getGaslimit();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      13,
      f
    );
  }
  f = message.getGasused();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      14,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getTransactioncount();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getTracecount();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getTransactionfees();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getStaticreward();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getUnclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.service.uncle.serializeBinaryToWriter
    );
  }
  f = message.getMixhash();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
};


/**
 * optional string Hash = 1;
 * @return {string}
 */
proto.service.Block.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 Number = 2;
 * @return {number}
 */
proto.service.Block.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ParentHash = 3;
 * @return {string}
 */
proto.service.Block.prototype.getParenthash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setParenthash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 Nonce = 4;
 * @return {string}
 */
proto.service.Block.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional string Sha3Uncles = 5;
 * @return {string}
 */
proto.service.Block.prototype.getSha3uncles = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setSha3uncles = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes LogsBloom = 6;
 * @return {!(string|Uint8Array)}
 */
proto.service.Block.prototype.getLogsbloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes LogsBloom = 6;
 * This is a type-conversion wrapper around `getLogsbloom()`
 * @return {string}
 */
proto.service.Block.prototype.getLogsbloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogsbloom()));
};


/**
 * optional bytes LogsBloom = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogsbloom()`
 * @return {!Uint8Array}
 */
proto.service.Block.prototype.getLogsbloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogsbloom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setLogsbloom = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string StateRoot = 7;
 * @return {string}
 */
proto.service.Block.prototype.getStateroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setStateroot = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Miner = 8;
 * @return {string}
 */
proto.service.Block.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Difficulty = 9;
 * @return {string}
 */
proto.service.Block.prototype.getDifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string TotalDifficulty = 10;
 * @return {string}
 */
proto.service.Block.prototype.getTotaldifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setTotaldifficulty = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 Size = 11;
 * @return {string}
 */
proto.service.Block.prototype.getSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setSize = function(value) {
  return jspb.Message.setProto3StringIntField(this, 11, value);
};


/**
 * optional bytes ExtraData = 12;
 * @return {!(string|Uint8Array)}
 */
proto.service.Block.prototype.getExtradata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes ExtraData = 12;
 * This is a type-conversion wrapper around `getExtradata()`
 * @return {string}
 */
proto.service.Block.prototype.getExtradata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtradata()));
};


/**
 * optional bytes ExtraData = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtradata()`
 * @return {!Uint8Array}
 */
proto.service.Block.prototype.getExtradata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtradata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setExtradata = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional uint64 GasLimit = 13;
 * @return {string}
 */
proto.service.Block.prototype.getGaslimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setGaslimit = function(value) {
  return jspb.Message.setProto3StringIntField(this, 13, value);
};


/**
 * optional uint64 GasUsed = 14;
 * @return {string}
 */
proto.service.Block.prototype.getGasused = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setGasused = function(value) {
  return jspb.Message.setProto3StringIntField(this, 14, value);
};


/**
 * optional uint64 Timestamp = 15;
 * @return {number}
 */
proto.service.Block.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint64 TransactionCount = 16;
 * @return {number}
 */
proto.service.Block.prototype.getTransactioncount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setTransactioncount = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint64 TraceCount = 17;
 * @return {number}
 */
proto.service.Block.prototype.getTracecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setTracecount = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string BaseFeePerGas = 18;
 * @return {string}
 */
proto.service.Block.prototype.getBasefeepergas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setBasefeepergas = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.clearBasefeepergas = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Block.prototype.hasBasefeepergas = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string BurntFees = 19;
 * @return {string}
 */
proto.service.Block.prototype.getBurntfees = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setBurntfees = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.clearBurntfees = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Block.prototype.hasBurntfees = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string TransactionFees = 20;
 * @return {string}
 */
proto.service.Block.prototype.getTransactionfees = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setTransactionfees = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string StaticReward = 21;
 * @return {string}
 */
proto.service.Block.prototype.getStaticreward = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setStaticreward = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * repeated uncle Uncles = 22;
 * @return {!Array<!proto.service.uncle>}
 */
proto.service.Block.prototype.getUnclesList = function() {
  return /** @type{!Array<!proto.service.uncle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.uncle, 22));
};


/**
 * @param {!Array<!proto.service.uncle>} value
 * @return {!proto.service.Block} returns this
*/
proto.service.Block.prototype.setUnclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.service.uncle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.uncle}
 */
proto.service.Block.prototype.addUncles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.service.uncle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.clearUnclesList = function() {
  return this.setUnclesList([]);
};


/**
 * optional string MixHash = 23;
 * @return {string}
 */
proto.service.Block.prototype.getMixhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Block} returns this
 */
proto.service.Block.prototype.setMixhash = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.Withdrawal.prototype.toObject = function(opt_includeInstance) {
  return proto.service.Withdrawal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.Withdrawal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Withdrawal.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    validatorindex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 4, ""),
    address: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.Withdrawal}
 */
proto.service.Withdrawal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.Withdrawal;
  return proto.service.Withdrawal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.Withdrawal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.Withdrawal}
 */
proto.service.Withdrawal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidatorindex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.Withdrawal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.Withdrawal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.Withdrawal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Withdrawal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getValidatorindex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string BlockHash = 1;
 * @return {string}
 */
proto.service.Withdrawal.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Withdrawal} returns this
 */
proto.service.Withdrawal.prototype.setBlockhash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 Index = 2;
 * @return {number}
 */
proto.service.Withdrawal.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Withdrawal} returns this
 */
proto.service.Withdrawal.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ValidatorIndex = 3;
 * @return {number}
 */
proto.service.Withdrawal.prototype.getValidatorindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Withdrawal} returns this
 */
proto.service.Withdrawal.prototype.setValidatorindex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string Amount = 4;
 * @return {string}
 */
proto.service.Withdrawal.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Withdrawal} returns this
 */
proto.service.Withdrawal.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Address = 5;
 * @return {string}
 */
proto.service.Withdrawal.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Withdrawal} returns this
 */
proto.service.Withdrawal.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.uncle.prototype.toObject = function(opt_includeInstance) {
  return proto.service.uncle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.uncle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.uncle.toObject = function(includeInstance, msg) {
  var f, obj = {
    nephewnumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    number: jspb.Message.getFieldWithDefault(msg, 3, 0),
    parenthash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    miner: jspb.Message.getFieldWithDefault(msg, 5, ""),
    difficulty: jspb.Message.getFieldWithDefault(msg, 6, ""),
    gaslimit: jspb.Message.getFieldWithDefault(msg, 7, "0"),
    gasused: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    timestamp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    reward: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.uncle}
 */
proto.service.uncle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.uncle;
  return proto.service.uncle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.uncle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.uncle}
 */
proto.service.uncle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNephewnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParenthash(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDifficulty(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGaslimit(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGasused(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.uncle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.uncle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.uncle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.uncle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNephewnumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getParenthash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGaslimit();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      7,
      f
    );
  }
  f = message.getGasused();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      8,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getReward();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional uint64 NephewNumber = 1;
 * @return {number}
 */
proto.service.uncle.prototype.getNephewnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setNephewnumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Hash = 2;
 * @return {string}
 */
proto.service.uncle.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 Number = 3;
 * @return {number}
 */
proto.service.uncle.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ParentHash = 4;
 * @return {string}
 */
proto.service.uncle.prototype.getParenthash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setParenthash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Miner = 5;
 * @return {string}
 */
proto.service.uncle.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Difficulty = 6;
 * @return {string}
 */
proto.service.uncle.prototype.getDifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 GasLimit = 7;
 * @return {string}
 */
proto.service.uncle.prototype.getGaslimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setGaslimit = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};


/**
 * optional uint64 GasUsed = 8;
 * @return {string}
 */
proto.service.uncle.prototype.getGasused = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setGasused = function(value) {
  return jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional uint64 Timestamp = 9;
 * @return {number}
 */
proto.service.uncle.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string Reward = 10;
 * @return {string}
 */
proto.service.uncle.prototype.getReward = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.uncle} returns this
 */
proto.service.uncle.prototype.setReward = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.ListBlocksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ListBlocksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ListBlocksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ListBlocksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListBlocksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.service.Block.toObject, includeInstance),
    totalrecords: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ListBlocksResponse}
 */
proto.service.ListBlocksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ListBlocksResponse;
  return proto.service.ListBlocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ListBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ListBlocksResponse}
 */
proto.service.ListBlocksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.Block;
      reader.readMessage(value,proto.service.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalrecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ListBlocksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ListBlocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ListBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListBlocksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.service.Block.serializeBinaryToWriter
    );
  }
  f = message.getTotalrecords();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated Block Blocks = 1;
 * @return {!Array<!proto.service.Block>}
 */
proto.service.ListBlocksResponse.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.service.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.Block, 1));
};


/**
 * @param {!Array<!proto.service.Block>} value
 * @return {!proto.service.ListBlocksResponse} returns this
*/
proto.service.ListBlocksResponse.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.service.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.Block}
 */
proto.service.ListBlocksResponse.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.service.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.ListBlocksResponse} returns this
 */
proto.service.ListBlocksResponse.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};


/**
 * optional uint64 TotalRecords = 2;
 * @return {number}
 */
proto.service.ListBlocksResponse.prototype.getTotalrecords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.ListBlocksResponse} returns this
 */
proto.service.ListBlocksResponse.prototype.setTotalrecords = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.BlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.BlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.BlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.BlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.service.Block.toObject(includeInstance, f),
    latestblocknumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.BlockResponse}
 */
proto.service.BlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.BlockResponse;
  return proto.service.BlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.BlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.BlockResponse}
 */
proto.service.BlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.Block;
      reader.readMessage(value,proto.service.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestblocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.BlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.BlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.BlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.BlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.Block.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional Block Block = 1;
 * @return {?proto.service.Block}
 */
proto.service.BlockResponse.prototype.getBlock = function() {
  return /** @type{?proto.service.Block} */ (
    jspb.Message.getWrapperField(this, proto.service.Block, 1));
};


/**
 * @param {?proto.service.Block|undefined} value
 * @return {!proto.service.BlockResponse} returns this
*/
proto.service.BlockResponse.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.BlockResponse} returns this
 */
proto.service.BlockResponse.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.BlockResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 LatestBlockNumber = 2;
 * @return {number}
 */
proto.service.BlockResponse.prototype.getLatestblocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.BlockResponse} returns this
 */
proto.service.BlockResponse.prototype.setLatestblocknumber = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.BlockResponse} returns this
 */
proto.service.BlockResponse.prototype.clearLatestblocknumber = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.BlockResponse.prototype.hasLatestblocknumber = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetBlockByBlockNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetBlockByBlockNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetBlockByBlockNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetBlockByBlockNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetBlockByBlockNumberRequest}
 */
proto.service.GetBlockByBlockNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetBlockByBlockNumberRequest;
  return proto.service.GetBlockByBlockNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetBlockByBlockNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetBlockByBlockNumberRequest}
 */
proto.service.GetBlockByBlockNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetBlockByBlockNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetBlockByBlockNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetBlockByBlockNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetBlockByBlockNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 Number = 1;
 * @return {number}
 */
proto.service.GetBlockByBlockNumberRequest.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.GetBlockByBlockNumberRequest} returns this
 */
proto.service.GetBlockByBlockNumberRequest.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetBlockByBlockHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetBlockByBlockHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetBlockByBlockHashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetBlockByBlockHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetBlockByBlockHashRequest}
 */
proto.service.GetBlockByBlockHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetBlockByBlockHashRequest;
  return proto.service.GetBlockByBlockHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetBlockByBlockHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetBlockByBlockHashRequest}
 */
proto.service.GetBlockByBlockHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetBlockByBlockHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetBlockByBlockHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetBlockByBlockHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetBlockByBlockHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Hash = 1;
 * @return {string}
 */
proto.service.GetBlockByBlockHashRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetBlockByBlockHashRequest} returns this
 */
proto.service.GetBlockByBlockHashRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ListTransactionsByAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ListTransactionsByAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ListTransactionsByAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListTransactionsByAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagination: (f = msg.getPagination()) && proto.service.PaginationRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ListTransactionsByAddressRequest}
 */
proto.service.ListTransactionsByAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ListTransactionsByAddressRequest;
  return proto.service.ListTransactionsByAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ListTransactionsByAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ListTransactionsByAddressRequest}
 */
proto.service.ListTransactionsByAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.service.PaginationRequest;
      reader.readMessage(value,proto.service.PaginationRequest.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ListTransactionsByAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ListTransactionsByAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ListTransactionsByAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListTransactionsByAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.PaginationRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.service.ListTransactionsByAddressRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.ListTransactionsByAddressRequest} returns this
 */
proto.service.ListTransactionsByAddressRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PaginationRequest Pagination = 2;
 * @return {?proto.service.PaginationRequest}
 */
proto.service.ListTransactionsByAddressRequest.prototype.getPagination = function() {
  return /** @type{?proto.service.PaginationRequest} */ (
    jspb.Message.getWrapperField(this, proto.service.PaginationRequest, 2));
};


/**
 * @param {?proto.service.PaginationRequest|undefined} value
 * @return {!proto.service.ListTransactionsByAddressRequest} returns this
*/
proto.service.ListTransactionsByAddressRequest.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.ListTransactionsByAddressRequest} returns this
 */
proto.service.ListTransactionsByAddressRequest.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.ListTransactionsByAddressRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.TransactionsListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.TransactionsListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.TransactionsListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.TransactionsListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.TransactionsListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.service.Transaction.toObject, includeInstance),
    totalrecords: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.TransactionsListResponse}
 */
proto.service.TransactionsListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.TransactionsListResponse;
  return proto.service.TransactionsListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.TransactionsListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.TransactionsListResponse}
 */
proto.service.TransactionsListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.Transaction;
      reader.readMessage(value,proto.service.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalrecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.TransactionsListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.TransactionsListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.TransactionsListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.TransactionsListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.service.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getTotalrecords();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated Transaction Transactions = 1;
 * @return {!Array<!proto.service.Transaction>}
 */
proto.service.TransactionsListResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.service.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.Transaction, 1));
};


/**
 * @param {!Array<!proto.service.Transaction>} value
 * @return {!proto.service.TransactionsListResponse} returns this
*/
proto.service.TransactionsListResponse.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.service.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.Transaction}
 */
proto.service.TransactionsListResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.service.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.TransactionsListResponse} returns this
 */
proto.service.TransactionsListResponse.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


/**
 * optional uint64 TotalRecords = 2;
 * @return {number}
 */
proto.service.TransactionsListResponse.prototype.getTotalrecords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.TransactionsListResponse} returns this
 */
proto.service.TransactionsListResponse.prototype.setTotalrecords = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.Transaction.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.service.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    method: jspb.Message.getFieldWithDefault(msg, 2, ""),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blockhash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fromaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    toaddress: jspb.Message.getFieldWithDefault(msg, 8, ""),
    value: jspb.Message.getFieldWithDefault(msg, 9, ""),
    gas: jspb.Message.getFieldWithDefault(msg, 10, "0"),
    gasused: jspb.Message.getFieldWithDefault(msg, 11, "0"),
    gasprice: jspb.Message.getFieldWithDefault(msg, 12, ""),
    input: msg.getInput_asB64(),
    accessobjectsList: jspb.Message.toObjectList(msg.getAccessobjectsList(),
    proto.service.accessObject.toObject, includeInstance),
    blocktimestamp: jspb.Message.getFieldWithDefault(msg, 15, 0),
    maxfeepergas: jspb.Message.getFieldWithDefault(msg, 16, ""),
    maxpriorityfeepergas: jspb.Message.getFieldWithDefault(msg, 17, ""),
    basefeepergas: jspb.Message.getFieldWithDefault(msg, 18, ""),
    transactiontype: jspb.Message.getFieldWithDefault(msg, 19, 0),
    transactionfee: jspb.Message.getFieldWithDefault(msg, 20, ""),
    receiptcumulativegasused: jspb.Message.getFieldWithDefault(msg, 21, "0"),
    receiptstatus: jspb.Message.getFieldWithDefault(msg, 22, 0),
    qantransactioninput: (f = msg.getQantransactioninput()) && proto.service.qanTransactionInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.Transaction}
 */
proto.service.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.Transaction;
  return proto.service.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.Transaction}
 */
proto.service.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromaddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setToaddress(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGas(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGasused(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasprice(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInput(value);
      break;
    case 14:
      var value = new proto.service.accessObject;
      reader.readMessage(value,proto.service.accessObject.deserializeBinaryFromReader);
      msg.addAccessobjects(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocktimestamp(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxfeepergas(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxpriorityfeepergas(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasefeepergas(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactiontype(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionfee(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setReceiptcumulativegasused(value);
      break;
    case 22:
      var value = /** @type {!proto.service.Transaction.receiptStatus} */ (reader.readEnum());
      msg.setReceiptstatus(value);
      break;
    case 23:
      var value = new proto.service.qanTransactionInput;
      reader.readMessage(value,proto.service.qanTransactionInput.deserializeBinaryFromReader);
      msg.setQantransactioninput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlockhash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getFromaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getToaddress();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGas();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      10,
      f
    );
  }
  f = message.getGasused();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      11,
      f
    );
  }
  f = message.getGasprice();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getInput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getAccessobjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.service.accessObject.serializeBinaryToWriter
    );
  }
  f = message.getBlocktimestamp();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getTransactiontype();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getTransactionfee();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getReceiptcumulativegasused();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      21,
      f
    );
  }
  f = message.getReceiptstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      22,
      f
    );
  }
  f = message.getQantransactioninput();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.service.qanTransactionInput.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.service.Transaction.receiptStatus = {
  FAILURE: 0,
  SUCCESS: 1
};

/**
 * optional string Hash = 1;
 * @return {string}
 */
proto.service.Transaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Method = 2;
 * @return {string}
 */
proto.service.Transaction.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 Index = 3;
 * @return {number}
 */
proto.service.Transaction.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string Nonce = 4;
 * @return {string}
 */
proto.service.Transaction.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string BlockHash = 5;
 * @return {string}
 */
proto.service.Transaction.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setBlockhash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 BlockNumber = 6;
 * @return {number}
 */
proto.service.Transaction.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setBlocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string FromAddress = 7;
 * @return {string}
 */
proto.service.Transaction.prototype.getFromaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setFromaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string ToAddress = 8;
 * @return {string}
 */
proto.service.Transaction.prototype.getToaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setToaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Value = 9;
 * @return {string}
 */
proto.service.Transaction.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 Gas = 10;
 * @return {string}
 */
proto.service.Transaction.prototype.getGas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setGas = function(value) {
  return jspb.Message.setProto3StringIntField(this, 10, value);
};


/**
 * optional uint64 GasUsed = 11;
 * @return {string}
 */
proto.service.Transaction.prototype.getGasused = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setGasused = function(value) {
  return jspb.Message.setProto3StringIntField(this, 11, value);
};


/**
 * optional string GasPrice = 12;
 * @return {string}
 */
proto.service.Transaction.prototype.getGasprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setGasprice = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bytes Input = 13;
 * @return {!(string|Uint8Array)}
 */
proto.service.Transaction.prototype.getInput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes Input = 13;
 * This is a type-conversion wrapper around `getInput()`
 * @return {string}
 */
proto.service.Transaction.prototype.getInput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInput()));
};


/**
 * optional bytes Input = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInput()`
 * @return {!Uint8Array}
 */
proto.service.Transaction.prototype.getInput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setInput = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * repeated accessObject AccessObjects = 14;
 * @return {!Array<!proto.service.accessObject>}
 */
proto.service.Transaction.prototype.getAccessobjectsList = function() {
  return /** @type{!Array<!proto.service.accessObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.accessObject, 14));
};


/**
 * @param {!Array<!proto.service.accessObject>} value
 * @return {!proto.service.Transaction} returns this
*/
proto.service.Transaction.prototype.setAccessobjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.service.accessObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.accessObject}
 */
proto.service.Transaction.prototype.addAccessobjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.service.accessObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.clearAccessobjectsList = function() {
  return this.setAccessobjectsList([]);
};


/**
 * optional uint64 BlockTimestamp = 15;
 * @return {number}
 */
proto.service.Transaction.prototype.getBlocktimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setBlocktimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string MaxFeePerGas = 16;
 * @return {string}
 */
proto.service.Transaction.prototype.getMaxfeepergas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setMaxfeepergas = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.clearMaxfeepergas = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Transaction.prototype.hasMaxfeepergas = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string MaxPriorityFeePerGas = 17;
 * @return {string}
 */
proto.service.Transaction.prototype.getMaxpriorityfeepergas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setMaxpriorityfeepergas = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.clearMaxpriorityfeepergas = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Transaction.prototype.hasMaxpriorityfeepergas = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string BaseFeePerGas = 18;
 * @return {string}
 */
proto.service.Transaction.prototype.getBasefeepergas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setBasefeepergas = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.clearBasefeepergas = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Transaction.prototype.hasBasefeepergas = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional uint32 TransactionType = 19;
 * @return {number}
 */
proto.service.Transaction.prototype.getTransactiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setTransactiontype = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string TransactionFee = 20;
 * @return {string}
 */
proto.service.Transaction.prototype.getTransactionfee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setTransactionfee = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional uint64 ReceiptCumulativeGasUsed = 21;
 * @return {string}
 */
proto.service.Transaction.prototype.getReceiptcumulativegasused = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, "0"));
};


/**
 * @param {string} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setReceiptcumulativegasused = function(value) {
  return jspb.Message.setProto3StringIntField(this, 21, value);
};


/**
 * optional receiptStatus ReceiptStatus = 22;
 * @return {!proto.service.Transaction.receiptStatus}
 */
proto.service.Transaction.prototype.getReceiptstatus = function() {
  return /** @type {!proto.service.Transaction.receiptStatus} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {!proto.service.Transaction.receiptStatus} value
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.setReceiptstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 22, value);
};


/**
 * optional qanTransactionInput QanTransactionInput = 23;
 * @return {?proto.service.qanTransactionInput}
 */
proto.service.Transaction.prototype.getQantransactioninput = function() {
  return /** @type{?proto.service.qanTransactionInput} */ (
    jspb.Message.getWrapperField(this, proto.service.qanTransactionInput, 23));
};


/**
 * @param {?proto.service.qanTransactionInput|undefined} value
 * @return {!proto.service.Transaction} returns this
*/
proto.service.Transaction.prototype.setQantransactioninput = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.Transaction} returns this
 */
proto.service.Transaction.prototype.clearQantransactioninput = function() {
  return this.setQantransactioninput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Transaction.prototype.hasQantransactioninput = function() {
  return jspb.Message.getField(this, 23) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.qanTransactionInput.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.qanTransactionInput.prototype.toObject = function(opt_includeInstance) {
  return proto.service.qanTransactionInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.qanTransactionInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.qanTransactionInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    memory: jspb.Message.getFieldWithDefault(msg, 1, 0),
    method: jspb.Message.getFieldWithDefault(msg, 2, ""),
    argsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.qanTransactionInput}
 */
proto.service.qanTransactionInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.qanTransactionInput;
  return proto.service.qanTransactionInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.qanTransactionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.qanTransactionInput}
 */
proto.service.qanTransactionInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemory(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.qanTransactionInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.qanTransactionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.qanTransactionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.qanTransactionInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemory();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional uint64 Memory = 1;
 * @return {number}
 */
proto.service.qanTransactionInput.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.qanTransactionInput} returns this
 */
proto.service.qanTransactionInput.prototype.setMemory = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Method = 2;
 * @return {string}
 */
proto.service.qanTransactionInput.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.qanTransactionInput} returns this
 */
proto.service.qanTransactionInput.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string Args = 3;
 * @return {!Array<string>}
 */
proto.service.qanTransactionInput.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.service.qanTransactionInput} returns this
 */
proto.service.qanTransactionInput.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.service.qanTransactionInput} returns this
 */
proto.service.qanTransactionInput.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.qanTransactionInput} returns this
 */
proto.service.qanTransactionInput.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.accessObject.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.accessObject.prototype.toObject = function(opt_includeInstance) {
  return proto.service.accessObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.accessObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.accessObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storagekeysList: msg.getStoragekeysList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.accessObject}
 */
proto.service.accessObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.accessObject;
  return proto.service.accessObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.accessObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.accessObject}
 */
proto.service.accessObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addStoragekeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.accessObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.accessObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.accessObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.accessObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStoragekeysList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.service.accessObject.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.accessObject} returns this
 */
proto.service.accessObject.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bytes StorageKeys = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.service.accessObject.prototype.getStoragekeysList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes StorageKeys = 2;
 * This is a type-conversion wrapper around `getStoragekeysList()`
 * @return {!Array<string>}
 */
proto.service.accessObject.prototype.getStoragekeysList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getStoragekeysList()));
};


/**
 * repeated bytes StorageKeys = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStoragekeysList()`
 * @return {!Array<!Uint8Array>}
 */
proto.service.accessObject.prototype.getStoragekeysList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getStoragekeysList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.service.accessObject} returns this
 */
proto.service.accessObject.prototype.setStoragekeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.service.accessObject} returns this
 */
proto.service.accessObject.prototype.addStoragekeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.accessObject} returns this
 */
proto.service.accessObject.prototype.clearStoragekeysList = function() {
  return this.setStoragekeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetTransactionRequest}
 */
proto.service.GetTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetTransactionRequest;
  return proto.service.GetTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetTransactionRequest}
 */
proto.service.GetTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Hash = 1;
 * @return {string}
 */
proto.service.GetTransactionRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetTransactionRequest} returns this
 */
proto.service.GetTransactionRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.GetTransactionResponse.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.service.Transaction.toObject(includeInstance, f),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.service.Log.toObject, includeInstance),
    tracesList: jspb.Message.toObjectList(msg.getTracesList(),
    proto.service.Trace.toObject, includeInstance),
    statechangesList: jspb.Message.toObjectList(msg.getStatechangesList(),
    proto.service.StateChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetTransactionResponse}
 */
proto.service.GetTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetTransactionResponse;
  return proto.service.GetTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetTransactionResponse}
 */
proto.service.GetTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.Transaction;
      reader.readMessage(value,proto.service.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = new proto.service.Log;
      reader.readMessage(value,proto.service.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 3:
      var value = new proto.service.Trace;
      reader.readMessage(value,proto.service.Trace.deserializeBinaryFromReader);
      msg.addTraces(value);
      break;
    case 4:
      var value = new proto.service.StateChange;
      reader.readMessage(value,proto.service.StateChange.deserializeBinaryFromReader);
      msg.addStatechanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.service.Log.serializeBinaryToWriter
    );
  }
  f = message.getTracesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.service.Trace.serializeBinaryToWriter
    );
  }
  f = message.getStatechangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.service.StateChange.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction Transaction = 1;
 * @return {?proto.service.Transaction}
 */
proto.service.GetTransactionResponse.prototype.getTransaction = function() {
  return /** @type{?proto.service.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.service.Transaction, 1));
};


/**
 * @param {?proto.service.Transaction|undefined} value
 * @return {!proto.service.GetTransactionResponse} returns this
*/
proto.service.GetTransactionResponse.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetTransactionResponse} returns this
 */
proto.service.GetTransactionResponse.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetTransactionResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Log Logs = 2;
 * @return {!Array<!proto.service.Log>}
 */
proto.service.GetTransactionResponse.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.service.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.Log, 2));
};


/**
 * @param {!Array<!proto.service.Log>} value
 * @return {!proto.service.GetTransactionResponse} returns this
*/
proto.service.GetTransactionResponse.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.service.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.Log}
 */
proto.service.GetTransactionResponse.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.service.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.GetTransactionResponse} returns this
 */
proto.service.GetTransactionResponse.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * repeated Trace Traces = 3;
 * @return {!Array<!proto.service.Trace>}
 */
proto.service.GetTransactionResponse.prototype.getTracesList = function() {
  return /** @type{!Array<!proto.service.Trace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.Trace, 3));
};


/**
 * @param {!Array<!proto.service.Trace>} value
 * @return {!proto.service.GetTransactionResponse} returns this
*/
proto.service.GetTransactionResponse.prototype.setTracesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.service.Trace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.Trace}
 */
proto.service.GetTransactionResponse.prototype.addTraces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.service.Trace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.GetTransactionResponse} returns this
 */
proto.service.GetTransactionResponse.prototype.clearTracesList = function() {
  return this.setTracesList([]);
};


/**
 * repeated StateChange StateChanges = 4;
 * @return {!Array<!proto.service.StateChange>}
 */
proto.service.GetTransactionResponse.prototype.getStatechangesList = function() {
  return /** @type{!Array<!proto.service.StateChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.StateChange, 4));
};


/**
 * @param {!Array<!proto.service.StateChange>} value
 * @return {!proto.service.GetTransactionResponse} returns this
*/
proto.service.GetTransactionResponse.prototype.setStatechangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.service.StateChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.StateChange}
 */
proto.service.GetTransactionResponse.prototype.addStatechanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.service.StateChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.GetTransactionResponse} returns this
 */
proto.service.GetTransactionResponse.prototype.clearStatechangesList = function() {
  return this.setStatechangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.service.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventsignature: jspb.Message.getFieldWithDefault(msg, 3, ""),
    topic0: msg.getTopic0_asB64(),
    topic1: msg.getTopic1_asB64(),
    topic2: msg.getTopic2_asB64(),
    topic3: msg.getTopic3_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.Log}
 */
proto.service.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.Log;
  return proto.service.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.Log}
 */
proto.service.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventsignature(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic0(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic1(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic2(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic3(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional uint64 Index = 1;
 * @return {number}
 */
proto.service.Log.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Address = 2;
 * @return {string}
 */
proto.service.Log.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string EventSignature = 3;
 * @return {string}
 */
proto.service.Log.prototype.getEventsignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.setEventsignature = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.clearEventsignature = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Log.prototype.hasEventsignature = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes Topic0 = 4;
 * @return {!(string|Uint8Array)}
 */
proto.service.Log.prototype.getTopic0 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Topic0 = 4;
 * This is a type-conversion wrapper around `getTopic0()`
 * @return {string}
 */
proto.service.Log.prototype.getTopic0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic0()));
};


/**
 * optional bytes Topic0 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic0()`
 * @return {!Uint8Array}
 */
proto.service.Log.prototype.getTopic0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic0()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.setTopic0 = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.clearTopic0 = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Log.prototype.hasTopic0 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes Topic1 = 5;
 * @return {!(string|Uint8Array)}
 */
proto.service.Log.prototype.getTopic1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes Topic1 = 5;
 * This is a type-conversion wrapper around `getTopic1()`
 * @return {string}
 */
proto.service.Log.prototype.getTopic1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic1()));
};


/**
 * optional bytes Topic1 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic1()`
 * @return {!Uint8Array}
 */
proto.service.Log.prototype.getTopic1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.setTopic1 = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.clearTopic1 = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Log.prototype.hasTopic1 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes Topic2 = 6;
 * @return {!(string|Uint8Array)}
 */
proto.service.Log.prototype.getTopic2 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes Topic2 = 6;
 * This is a type-conversion wrapper around `getTopic2()`
 * @return {string}
 */
proto.service.Log.prototype.getTopic2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic2()));
};


/**
 * optional bytes Topic2 = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic2()`
 * @return {!Uint8Array}
 */
proto.service.Log.prototype.getTopic2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic2()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.setTopic2 = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.clearTopic2 = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Log.prototype.hasTopic2 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes Topic3 = 7;
 * @return {!(string|Uint8Array)}
 */
proto.service.Log.prototype.getTopic3 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes Topic3 = 7;
 * This is a type-conversion wrapper around `getTopic3()`
 * @return {string}
 */
proto.service.Log.prototype.getTopic3_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic3()));
};


/**
 * optional bytes Topic3 = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic3()`
 * @return {!Uint8Array}
 */
proto.service.Log.prototype.getTopic3_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic3()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.setTopic3 = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.clearTopic3 = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.Log.prototype.hasTopic3 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes Data = 8;
 * @return {!(string|Uint8Array)}
 */
proto.service.Log.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes Data = 8;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.service.Log.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.service.Log.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.Log} returns this
 */
proto.service.Log.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ListErc20TokenTransfersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ListErc20TokenTransfersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ListErc20TokenTransfersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListErc20TokenTransfersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromortoaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pagination: (f = msg.getPagination()) && proto.service.PaginationRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ListErc20TokenTransfersRequest}
 */
proto.service.ListErc20TokenTransfersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ListErc20TokenTransfersRequest;
  return proto.service.ListErc20TokenTransfersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ListErc20TokenTransfersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ListErc20TokenTransfersRequest}
 */
proto.service.ListErc20TokenTransfersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromortoaddress(value);
      break;
    case 3:
      var value = new proto.service.PaginationRequest;
      reader.readMessage(value,proto.service.PaginationRequest.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ListErc20TokenTransfersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ListErc20TokenTransfersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ListErc20TokenTransfersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListErc20TokenTransfersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.service.PaginationRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string TokenAddress = 1;
 * @return {string}
 */
proto.service.ListErc20TokenTransfersRequest.prototype.getTokenaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.ListErc20TokenTransfersRequest} returns this
 */
proto.service.ListErc20TokenTransfersRequest.prototype.setTokenaddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.ListErc20TokenTransfersRequest} returns this
 */
proto.service.ListErc20TokenTransfersRequest.prototype.clearTokenaddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.ListErc20TokenTransfersRequest.prototype.hasTokenaddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string FromOrToAddress = 2;
 * @return {string}
 */
proto.service.ListErc20TokenTransfersRequest.prototype.getFromortoaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.ListErc20TokenTransfersRequest} returns this
 */
proto.service.ListErc20TokenTransfersRequest.prototype.setFromortoaddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.ListErc20TokenTransfersRequest} returns this
 */
proto.service.ListErc20TokenTransfersRequest.prototype.clearFromortoaddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.ListErc20TokenTransfersRequest.prototype.hasFromortoaddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PaginationRequest Pagination = 3;
 * @return {?proto.service.PaginationRequest}
 */
proto.service.ListErc20TokenTransfersRequest.prototype.getPagination = function() {
  return /** @type{?proto.service.PaginationRequest} */ (
    jspb.Message.getWrapperField(this, proto.service.PaginationRequest, 3));
};


/**
 * @param {?proto.service.PaginationRequest|undefined} value
 * @return {!proto.service.ListErc20TokenTransfersRequest} returns this
*/
proto.service.ListErc20TokenTransfersRequest.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.ListErc20TokenTransfersRequest} returns this
 */
proto.service.ListErc20TokenTransfersRequest.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.ListErc20TokenTransfersRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.ListErc20TokenTransfersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ListErc20TokenTransfersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ListErc20TokenTransfersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ListErc20TokenTransfersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListErc20TokenTransfersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    erc20tokentransferList: jspb.Message.toObjectList(msg.getErc20tokentransferList(),
    proto.service.erc20TokenTransfer.toObject, includeInstance),
    totalrecords: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ListErc20TokenTransfersResponse}
 */
proto.service.ListErc20TokenTransfersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ListErc20TokenTransfersResponse;
  return proto.service.ListErc20TokenTransfersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ListErc20TokenTransfersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ListErc20TokenTransfersResponse}
 */
proto.service.ListErc20TokenTransfersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.erc20TokenTransfer;
      reader.readMessage(value,proto.service.erc20TokenTransfer.deserializeBinaryFromReader);
      msg.addErc20tokentransfer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalrecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ListErc20TokenTransfersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ListErc20TokenTransfersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ListErc20TokenTransfersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ListErc20TokenTransfersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErc20tokentransferList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.service.erc20TokenTransfer.serializeBinaryToWriter
    );
  }
  f = message.getTotalrecords();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated erc20TokenTransfer Erc20TokenTransfer = 1;
 * @return {!Array<!proto.service.erc20TokenTransfer>}
 */
proto.service.ListErc20TokenTransfersResponse.prototype.getErc20tokentransferList = function() {
  return /** @type{!Array<!proto.service.erc20TokenTransfer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.erc20TokenTransfer, 1));
};


/**
 * @param {!Array<!proto.service.erc20TokenTransfer>} value
 * @return {!proto.service.ListErc20TokenTransfersResponse} returns this
*/
proto.service.ListErc20TokenTransfersResponse.prototype.setErc20tokentransferList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.service.erc20TokenTransfer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.erc20TokenTransfer}
 */
proto.service.ListErc20TokenTransfersResponse.prototype.addErc20tokentransfer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.service.erc20TokenTransfer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.ListErc20TokenTransfersResponse} returns this
 */
proto.service.ListErc20TokenTransfersResponse.prototype.clearErc20tokentransferList = function() {
  return this.setErc20tokentransferList([]);
};


/**
 * optional uint64 TotalRecords = 2;
 * @return {number}
 */
proto.service.ListErc20TokenTransfersResponse.prototype.getTotalrecords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.ListErc20TokenTransfersResponse} returns this
 */
proto.service.ListErc20TokenTransfersResponse.prototype.setTotalrecords = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.erc20TokenTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.service.erc20TokenTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.erc20TokenTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.erc20TokenTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blocktimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tokenname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokensymbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    transactionhash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    logindex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tokenaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    fromaddress: jspb.Message.getFieldWithDefault(msg, 8, ""),
    toaddress: jspb.Message.getFieldWithDefault(msg, 9, ""),
    value: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.erc20TokenTransfer}
 */
proto.service.erc20TokenTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.erc20TokenTransfer;
  return proto.service.erc20TokenTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.erc20TokenTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.erc20TokenTransfer}
 */
proto.service.erc20TokenTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocktimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokensymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionhash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLogindex(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenaddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromaddress(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setToaddress(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.erc20TokenTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.erc20TokenTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.erc20TokenTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.erc20TokenTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlocktimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTokenname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokensymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTransactionhash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLogindex();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getTokenaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFromaddress();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getToaddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string Method = 1;
 * @return {string}
 */
proto.service.erc20TokenTransfer.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 BlockTimestamp = 2;
 * @return {number}
 */
proto.service.erc20TokenTransfer.prototype.getBlocktimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setBlocktimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string TokenName = 3;
 * @return {string}
 */
proto.service.erc20TokenTransfer.prototype.getTokenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setTokenname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string TokenSymbol = 4;
 * @return {string}
 */
proto.service.erc20TokenTransfer.prototype.getTokensymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setTokensymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string TransactionHash = 5;
 * @return {string}
 */
proto.service.erc20TokenTransfer.prototype.getTransactionhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setTransactionhash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 LogIndex = 6;
 * @return {number}
 */
proto.service.erc20TokenTransfer.prototype.getLogindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setLogindex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string TokenAddress = 7;
 * @return {string}
 */
proto.service.erc20TokenTransfer.prototype.getTokenaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setTokenaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string FromAddress = 8;
 * @return {string}
 */
proto.service.erc20TokenTransfer.prototype.getFromaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setFromaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string ToAddress = 9;
 * @return {string}
 */
proto.service.erc20TokenTransfer.prototype.getToaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setToaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string Value = 10;
 * @return {string}
 */
proto.service.erc20TokenTransfer.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.erc20TokenTransfer} returns this
 */
proto.service.erc20TokenTransfer.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


goog.object.extend(exports, proto.service);
